// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User models
model User {
  id            String       @id @default(uuid())
  email         String       @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole     @default(STUDENT)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  enrollments   Enrollment[]
  createdCourses Course[]     @relation("CourseInstructor")
  
  @@map("users")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

// Course models
model Course {
  id                String           @id @default(uuid())
  title             String
  description       String?          @db.Text
  shortDescription  String?
  duration          Int?             // in minutes
  price             Decimal          @default(0)
  isFree            Boolean          @default(false)
  isPublished       Boolean          @default(false) // Giữ lại cho compatibility
  instructorId      String
  instructor        User             @relation("CourseInstructor", fields: [instructorId], references: [id])
  categoryId        String? // Temporary field for migration
  category          Category?        @relation(fields: [categoryId], references: [id])
  categories        CategoryCourse[]
  thumbnail         String?
  introVideo        String?
  prerequisites     String[]         @default([])
  learningOutcomes  String[]         @default([])
  totalStudents     Int              @default(0)
  totalLessons      Int              @default(0)
  status            CourseStatus     @default(DRAFT)
  language          String?          @default("en")
  averageRating     Float            @default(0)
  totalRatings      Int              @default(0)
  lessons           Lesson[]
  enrollments       Enrollment[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("courses")
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// Bảng trung gian cho quan hệ nhiều-nhiều Course-Category
model CategoryCourse {
  courseId      String
  course        Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  categoryId    String
  category      Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  assignedAt    DateTime   @default(now())

  @@id([courseId, categoryId])
  @@map("category_courses")
}

model Lesson {
  id          String       @id @default(uuid())
  title       String
  content     String
  order       Int
  courseId    String
  course      Course       @relation(fields: [courseId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  progress    Progress[]

  @@map("lessons")
}

// Enrollment models
model Enrollment {
  id        String     @id @default(uuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  courseId  String
  course    Course     @relation(fields: [courseId], references: [id])
  progress  Progress[]
  status    EnrollmentStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("enrollments")
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

model Progress {
  id          String     @id @default(uuid())
  enrollmentId String
  enrollment  Enrollment @relation(fields: [enrollmentId], references: [id])
  lessonId    String
  lesson      Lesson     @relation(fields: [lessonId], references: [id])
  completed   Boolean    @default(false)
  lastAccessed DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("progress")
}

// Category model
model Category {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  slug        String?          @unique
  imageUrl    String?
  order       Int              @default(0)
  isVisible   Boolean          @default(true)
  
  // Self-reference cho parent-child relationship
  parentId    String?
  parent      Category?        @relation("CategoryToSubcategory", fields: [parentId], references: [id], onDelete: SetNull)
  children    Category[]       @relation("CategoryToSubcategory")
  
  // Quan hệ với Course
  courses     Course[]
  courseCategories CategoryCourse[]
  
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("categories")
}

// Assessment models
model Assessment {
  id          String    @id @default(uuid())
  title       String
  description String?
  courseId    String
  questions   Question[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("assessments")
}

model Question {
  id            String    @id @default(uuid())
  content       String
  options       Json      // Array of options
  correctAnswer String
  assessmentId  String
  assessment    Assessment @relation(fields: [assessmentId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("questions")
}
