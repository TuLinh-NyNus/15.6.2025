generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                    @id @default(uuid())
  email                   String                    @unique
  password                String
  firstName               String
  lastName                String
  role                    UserRole                  @default(STUDENT)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  content_recommendations content_recommendations[]
  createdCourses          Course[]                  @relation("CourseInstructor")
  enrollments             Enrollment[]
  exam_results            exam_results[]
  exams                   exams[]
  learning_paths          learning_paths[]
  question_versions       question_versions[]
  questions               Question[]
  user_activity_logs      user_activity_logs[]
  user_interests          user_interests[]
  user_learning_styles    user_learning_styles?
  user_profiles           user_profiles?

  @@map("users")
}

model Course {
  id               String       @id @default(uuid())
  title            String
  description      String
  price            Decimal      @default(0)
  isPublished      Boolean      @default(false)
  categoryId       String
  instructorId     String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  duration         Int          @default(0)
  isFree           Boolean      @default(false)
  thumbnail        String?
  introVideo       String?
  prerequisites    String[]     @default([])
  learningOutcomes String[]     @default([])
  totalStudents    Int          @default(0)
  totalLessons     Int          @default(0)
  status           CourseStatus @default(DRAFT)
  language         String       @default("en")
  averageRating    Float        @default(0)
  totalRatings     Int          @default(0)
  category         Category     @relation(fields: [categoryId], references: [id])
  instructor       User         @relation("CourseInstructor", fields: [instructorId], references: [id])
  enrollments      Enrollment[]
  lessons          Lesson[]

  @@map("courses")
}

model Lesson {
  id          String        @id @default(uuid())
  title       String
  content     String
  order       Int
  courseId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  description String?
  duration    Int?
  isFree      Boolean       @default(false)
  resourceUrl String?
  type        LessonType    @default(VIDEO)
  LessonExams LessonExams[]
  course      Course        @relation(fields: [courseId], references: [id])
  progress    Progress[]

  @@map("lessons")
}

model Enrollment {
  id        String           @id @default(uuid())
  userId    String
  courseId  String
  status    EnrollmentStatus @default(ACTIVE)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  course    Course           @relation(fields: [courseId], references: [id])
  user      User             @relation(fields: [userId], references: [id])
  progress  Progress[]

  @@map("enrollments")
}

model Progress {
  id               String            @id @default(uuid())
  enrollmentId     String
  lessonId         String
  completed        Boolean           @default(false)
  lastAccessed     DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  attentionScore   Float?
  difficulty       LessonDifficulty?
  interactionCount Int?
  notes            String?
  revisitCount     Int               @default(0)
  timeSpent        Int?
  enrollment       Enrollment        @relation(fields: [enrollmentId], references: [id])
  lesson           Lesson            @relation(fields: [lessonId], references: [id])

  @@map("progress")
}

model Category {
  id             String           @id @default(uuid())
  name           String           @unique
  description    String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  imageUrl       String?
  isVisible      Boolean          @default(true)
  order          Int              @default(0)
  parentId       String?
  slug           String           @unique
  parent         Category?        @relation("CategoryToSubcategory", fields: [parentId], references: [id])
  children       Category[]       @relation("CategoryToSubcategory")
  courses        Course[]
  user_interests user_interests[]

  @@map("categories")
}

model Assessment {
  id                   String                 @id @default(uuid())
  title                String
  description          String?
  courseId             String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  assessment_questions assessment_questions[]

  @@map("assessments")
}

model Question {
  id                   String                 @id @default(uuid())
  content              String
  options              Json?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  answers              Json?
  creator              String?
  creatorId            String
  feedback             Int                    @default(0)
  form                 String?                @default("multiple-choice")
  questionID           String?
  questionId           String?
  raw_content          String?                @map("rawContent")
  solution             String?
  source               String?
  status               QuestionStatus         @default(ACTIVE)
  subcount             String?
  tags                 String?
  type                 QuestionType
  usageCount           Int                    @default(0)
  correctAnswer        Json?
  QuestionToTags       QuestionToTags[]
  assessment_questions assessment_questions[]
  exam_questions       exam_questions[]
  question_images      question_images[]
  question_versions    question_versions[]
  users                User                   @relation(fields: [creatorId], references: [id])

  @@index([creatorId])
  @@index([questionId])
  @@index([subcount])
  @@index([type, status])
  @@map("questions")
}

model QuestionToTags {
  A             String
  B             String
  questions     Question      @relation(fields: [A], references: [id], onDelete: Cascade)
  question_tags question_tags @relation(fields: [B], references: [id], onDelete: Cascade)

  @@unique([A, B], map: "_QuestionToTags_AB_unique")
  @@index([B], map: "_QuestionToTags_B_index")
  @@map("_QuestionToTags")
}

model assessment_questions {
  id           String     @id
  assessmentId String
  questionId   String
  order        Int
  score        Float      @default(1.0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime
  assessments  Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  questions    Question   @relation(fields: [questionId], references: [id])

  @@unique([assessmentId, questionId])
  @@index([assessmentId])
  @@index([questionId])
}

model content_recommendations {
  id          String    @id
  userId      String
  contentId   String
  contentType String
  score       Float     @default(0)
  reason      String[]  @default([])
  isViewed    Boolean   @default(false)
  isEnrolled  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  expiresAt   DateTime?
  users       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, contentType])
}

model exam_questions {
  id         String   @id
  examId     String
  questionId String
  order      Int
  score      Float    @default(1.0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  exams      exams    @relation(fields: [examId], references: [id], onDelete: Cascade)
  questions  Question @relation(fields: [questionId], references: [id])

  @@unique([examId, questionId])
  @@index([examId])
  @@index([questionId])
}

model exam_results {
  id          String   @id
  userId      String
  examId      String
  score       Float
  maxScore    Float
  startedAt   DateTime
  completedAt DateTime
  duration    Int
  answers     Json?
  exams       exams    @relation(fields: [examId], references: [id])
  users       User     @relation(fields: [userId], references: [id])

  @@index([examId])
  @@index([userId])
}

model exams {
  id             String           @id
  title          String
  description    Json?
  duration       Int
  difficulty     Difficulty
  subject        String
  grade          Int
  form           ExamForm         @default(TRAC_NGHIEM)
  createdBy      String
  averageScore   Float?
  updatedAt      DateTime
  createdAt      DateTime         @default(now())
  tags           String[]
  examCategory   ExamCategory
  type           ExamType         @default(DRAFT)
  LessonExams    LessonExams[]
  exam_questions exam_questions[]
  exam_results   exam_results[]
  users          User             @relation(fields: [createdBy], references: [id])

  @@index([createdBy])
  @@index([subject, grade, difficulty, examCategory])
}

model learning_path_steps {
  id             String         @id
  pathId         String
  contentId      String
  contentType    String
  order          Int
  isRequired     Boolean        @default(true)
  status         PathStatus     @default(NOT_STARTED)
  completedAt    DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  learning_paths learning_paths @relation(fields: [pathId], references: [id], onDelete: Cascade)

  @@index([pathId, order])
}

model learning_paths {
  id                      String                @id
  userId                  String
  title                   String
  description             String?
  goals                   String[]              @default([])
  estimatedCompletionTime Int                   @default(0)
  status                  PathStatus            @default(NOT_STARTED)
  createdAt               DateTime              @default(now())
  updatedAt               DateTime
  learning_path_steps     learning_path_steps[]
  users                   User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model question_images {
  id         String            @id
  questionId String
  url        String
  type       QuestionImageType
  createdAt  DateTime          @default(now())
  questions  Question          @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}

model question_tags {
  id             String           @id
  name           String           @unique
  description    String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  QuestionToTags QuestionToTags[]
}

model question_versions {
  id          String   @id
  questionId  String
  version     Int
  content     String
  rawContent  String
  changedAt   DateTime @default(now())
  changedById String
  users       User     @relation(fields: [changedById], references: [id])
  questions   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([questionId, version])
  @@index([questionId])
}

model user_activity_logs {
  id           String       @id
  userId       String
  activityType ActivityType
  entityId     String?
  entityType   String?
  metadata     Json?
  deviceInfo   String?
  ipAddress    String?
  timestamp    DateTime     @default(now())
  users        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([entityType, entityId])
  @@index([userId, activityType])
}

model user_interests {
  id            String   @id
  userId        String
  categoryId    String
  interestLevel Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  categories    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  users         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId])
}

model user_learning_styles {
  id               String   @id
  userId           String   @unique
  visualScore      Float    @default(0)
  auditoryScore    Float    @default(0)
  readingScore     Float    @default(0)
  kinestheticScore Float    @default(0)
  lastUpdated      DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime
  users            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user_profiles {
  id                      String    @id
  userId                  String    @unique
  bio                     String?
  phoneNumber             String?
  address                 String?
  birthDate               DateTime?
  avatarUrl               String?
  socialLinks             Json?
  preferences             Json?
  completionRate          Float     @default(0)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime
  languagePreference      String    @default("en")
  learningGoals           String[]  @default([])
  notificationPreferences Json?
  preferredLearningTime   String[]  @default([])
  weeklyLearningTarget    Int       @default(0)
  users                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LessonExams {
  A       String
  B       String
  lessons Lesson @relation(fields: [A], references: [id], onDelete: Cascade)
  exams   exams  @relation(fields: [B], references: [id], onDelete: Cascade)

  @@unique([A, B], map: "_LessonExams_AB_unique")
  @@index([B], map: "_LessonExams_B_index")
  @@map("_LessonExams")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
  USER
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum ActivityType {
  VIEW_COURSE
  VIEW_LESSON
  START_LESSON
  COMPLETE_LESSON
  SEARCH
  ENROLLMENT
  RATING
  LOGIN
  LOGOUT
  DOWNLOAD_RESOURCE
  COMMENT
  QUIZ_ATTEMPT
}

enum Difficulty {
  easy
  medium
  hard
}

enum ExamCategory {
  THUONG_XUYEN_MIENG
  GIUA_KI_I
  CUOI_KI_I
  GIUA_KI_II
  CUOI_KI_II
  KHAO_SAT
  DE_CUONG
  HOC_SINH_GIOI
  TUYEN_SINH
  KHAO_SAT_THI_THU
}

enum ExamForm {
  TRAC_NGHIEM
  TU_LUAN
  KET_HOP
  FORM_2018
  FORM_2025
}

enum ExamType {
  DRAFT
  PUBLISHED
  ARCHIVED
  PRACTICE
  ASSESSMENT
}

enum LessonDifficulty {
  EASY
  MEDIUM
  HARD
}

enum LessonType {
  VIDEO
  QUIZ
  ASSIGNMENT
  TEXT
}

enum PathStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum QuestionImageType {
  QUESTION
  SOLUTION
}

enum QuestionStatus {
  DRAFT
  ACTIVE
  PENDING
  ARCHIVED
  DELETED
}

enum QuestionType {
  MC
  TF
  SA
  ES
}
