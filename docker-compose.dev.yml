version: '3.8'

services:
  # Next.js Web Service for Development (with hot reload)
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile.dev
      target: development
    container_name: nynus_web_dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:5000
      - API_URL=http://api:5000
      - NEXT_TELEMETRY_DISABLED=1
      - WATCHPACK_POLLING=true
    volumes:
      # Mount source code for hot reload
      - ./apps/web/src:/app/apps/web/src
      - ./apps/web/public:/app/apps/web/public
      - ./apps/web/package.json:/app/apps/web/package.json
      - ./apps/web/next.config.js:/app/apps/web/next.config.js
      - ./apps/web/tailwind.config.ts:/app/apps/web/tailwind.config.ts
      - ./apps/web/postcss.config.js:/app/apps/web/postcss.config.js
      - ./packages:/app/packages
      - ./package.json:/app/package.json
      - ./pnpm-lock.yaml:/app/pnpm-lock.yaml
      - ./pnpm-workspace.yaml:/app/pnpm-workspace.yaml
      - ./turbo.json:/app/turbo.json
      # Exclude node_modules to avoid conflicts
      - web_node_modules:/app/node_modules
      - web_app_node_modules:/app/apps/web/node_modules
    depends_on:
      api:
        condition: service_healthy
    networks:
      - nynus_dev_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # NestJS API Service for Development (with hot reload)
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile.dev
      target: development
    container_name: nynus_api_dev
    ports:
      - "5000:5000"
      - "9229:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - PORT=5000
      - DATABASE_URL=postgresql://postgres:admin@db:5432/nynus_db?schema=public
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev_jwt_secret_key
      - JWT_EXPIRES_IN=7d
      - CORS_ORIGIN=http://localhost:3000,http://web:3000
      - FRONTEND_URL=http://web:3000
    volumes:
      # Mount source code for hot reload
      - ./apps/api/src:/app/apps/api/src
      - ./apps/api/prisma:/app/apps/api/prisma
      - ./apps/api/package.json:/app/apps/api/package.json
      - ./packages:/app/packages
      - ./package.json:/app/package.json
      - ./pnpm-lock.yaml:/app/pnpm-lock.yaml
      - ./pnpm-workspace.yaml:/app/pnpm-workspace.yaml
      - ./turbo.json:/app/turbo.json
      # Exclude node_modules to avoid conflicts
      - api_node_modules:/app/node_modules
      - api_app_node_modules:/app/apps/api/node_modules
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nynus_dev_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # PostgreSQL Database for Development
  db:
    image: postgres:15-alpine
    container_name: nynus_db_dev
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=nynus_db
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - nynus_dev_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d nynus_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      postgres
      -c log_statement=all
      -c log_destination=stderr
      -c log_min_duration_statement=0
      -c max_connections=100
      -c shared_buffers=128MB
      -c effective_cache_size=512MB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB

  # Redis Cache for Development
  redis:
    image: redis:7-alpine
    container_name: nynus_redis_dev
    ports:
      - "6379:6379"
    command: >
      redis-server
      --maxmemory 128mb
      --maxmemory-policy allkeys-lru
      --save ""
      --appendonly no
    volumes:
      - redis_dev_data:/data
    networks:
      - nynus_dev_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Prisma Studio for Development
  prisma-studio:
    image: node:18-alpine
    container_name: nynus_prisma_studio
    ports:
      - "8386:5555"
    working_dir: /app
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - DATABASE_URL=postgresql://postgres:admin@db:5432/nynus_db?schema=public
    command: >
      sh -c "
        npm install -g pnpm@8.15.4 &&
        cd apps/api &&
        pnpm install &&
        npx prisma generate &&
        npx prisma studio --hostname 0.0.0.0 --port 5555
      "
    depends_on:
      db:
        condition: service_healthy
    networks:
      - nynus_dev_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5555"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Adminer for Database Management (Optional)
  adminer:
    image: adminer:4.8.1
    container_name: nynus_adminer_dev
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=db
      - ADMINER_DESIGN=pepa-linha
    depends_on:
      db:
        condition: service_healthy
    networks:
      - nynus_dev_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

# Development volumes
volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  web_node_modules:
    driver: local
  web_app_node_modules:
    driver: local
  api_node_modules:
    driver: local
  api_app_node_modules:
    driver: local

# Development network
networks:
  nynus_dev_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
