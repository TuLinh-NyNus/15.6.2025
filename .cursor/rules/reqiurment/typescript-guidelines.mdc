---
name: typescript-guidelines.mdc
description: Hướng dẫn và best practices cho việc sử dụng TypeScript trong dự án
globs: **/*.{ts,tsx}
alwaysApply: true
---

# Guidelines cho TypeScript

## Type Definitions

- Đặt tên interface và type rõ ràng và mô tả
- Sử dụng PascalCase cho interfaces và types
- Đặt các type definitions trong thư mục `types/` hoặc cùng thư mục với file
- Prefer interfaces over types cho object shapes
- Sử dụng type khi cần union types hoặc utility types
- Export tất cả shared types
- Sử dụng JSDoc để document phức tạp types

## Type Safety

- Tránh sử dụng `any` type
- Sử dụng `unknown` thay vì `any` khi type không xác định
- Tránh type assertions (`as`) khi có thể
- Sử dụng type guards để narrow types
- Implement proper error handling với typed errors
- Tránh non-null assertions (`!`)
- Enable strict TypeScript checks

## Functions

- Define return types cho functions
- Sử dụng function overloads khi cần
- Implement generic functions khi thích hợp
- Sử dụng proper parameter typing
- Tạo reusable utility functions
- Document function parameters và return values
- Sử dụng default parameters khi thích hợp

## Classes & OOP

- Prefer composition over inheritance
- Use access modifiers (private, protected, public)
- Implement interfaces cho consistency
- Use abstract classes cho base behaviors
- Sử dụng static methods khi thích hợp
- Type instance properties correctly
- Sử dụng method overloading khi cần

## Generics

- Sử dụng meaningful type parameter names
- Implement constraints khi cần
- Tạo reusable generic types
- Sử dụng conditional types cho advanced scenarios
- Tận dụng utility types (Partial, Pick, Omit, etc.)
- Document cách sử dụng generics
- Tránh over-engineering với generics phức tạp

## Enums & Constants

- Sử dụng const enums cho performance
- Định nghĩa string enums khi cần string values
- Group related constants
- Sử dụng readonly arrays cho constant collections
- Export enums và constants khi cần tái sử dụng
- Document enum values
- Consider union of literal types thay vì enums

## Modules & Imports

- Organize imports theo nhóm (external, internal, relative)
- Sử dụng path aliases cho imports gọn hơn
- Avoid circular dependencies
- Export theo named exports thay vì default exports
- Tạo index files để re-export public API
- Sử dụng import type cho type-only imports
- Maintain consistent import style

## Error Handling

- Tạo custom error classes
- Type error handling code
- Sử dụng discriminated unions cho result types
- Implement error boundaries
- Tránh swallowing errors
- Log errors đầy đủ
- Provide context với errors

## Async Code

- Sử dụng async/await thay vì raw promises
- Type async function return values
- Handle promise rejections properly
- Implement proper cancellation mechanisms
- Type event handlers
- Sử dụng Promise.all/Promise.race với đúng typing
- Avoid callback hell

## Configuration

- Maintain strict tsconfig
- Enable all type checking flags
- Set consistent module resolution
- Configure path aliases
- Ensure library types được cài đặt
- Use project references khi cần thiết
- Include comments trong tsconfig

## Linting & Formatting

- Sử dụng ESLint với TypeScript plugin
- Enforce consistent code style
- Run type checking trong CI pipeline
- Cấu hình auto-fix khi có thể
- Add custom lint rules khi cần thiết
- Sử dụng Prettier cho formatting
- Enable strict rules incrementally

## Best Practices

- Tách business logic và UI code
- Implement proper domain modeling
- Tạo type-safe APIs
- Document complex type relationships
- Sử dụng functional programming patterns khi thích hợp
- Maintain type safety across async boundaries
- Write typed tests 